{"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"4.4.0"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30749,"isInternetEnabled":true,"language":"r","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/andrexibiza/titanic-machine-learning-from-disaster?scriptVersionId=218515899\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Titanic - Machine Learning from Disaster\n\n**Andrex Ibiza, MBA**\n2025-01-16","metadata":{}},{"cell_type":"markdown","source":"# v2.2 Notes\nThis is now version 2.2 of this notebook. In version 2.1, I attempted to apply and tune a LightGBM model, but it did not go well, scoring only 0.52870 accuracy. Version 2.0 achieved a score of 0.76076, so I reverted to that version. In reviewing v2.0 with fresh eyes, a specific error message in the output from the random forest model caught my attention: `“You are trying to do regression and your outcome only has two possible values Are you trying to do classification? If so, use a 2 level factor as your outcome column.”` So, my model was attempting to use regression on `Survived` instead of classification. In other words, it was estimating numbers on a continuous range from 0 to 1, instead of classifying with a binary 0 or 1. In spite of this shortcoming, the v2,0 model still scored 0.76076 simply using a round function on this regression result. Before making any other changes to my model selection or engineering new features from existing data, I want to know how much the score can be improved by simply fixing this data type issue and running the model again for scoring.","metadata":{}},{"cell_type":"markdown","source":"# Introduction\n\nThis notebook documents my second attempt at working through the Titanic dataset to build an accurate predictive model for Titanic shipwreck survivors (https://www.kaggle.com/competitions/titanic). My v1 model scored around 70% accuracy. In this iteration, to build a more accurate model, I plan to take a more nuanced approach toward fully exploring the data, dealing with missing values, and engineering meaningful new features.\n\n## Files\n* `gender_submission.csv`: example of what the final submitted file should look like with two columns: `PassengerID` and `Survived`.\n* `train.csv`: labeled data (`Survived`) used to build the model. 11 columns\n* `test.csv`: 12 columns\n\n## Data dictionary\n| Variable\t| Definition | Key | Notes |\n| --- | --- | --- | --- |\n| survival\t| Survival\t| 0 = No, 1 = Yes | --- |\n| pclass\t| Ticket class\t| 1 = 1st, 2 = 2nd, 3 = 3rd | Proxy for SES- 1st=upper, 2nd=middle, 3rd=lower |\n| sex\t| Sex | --- | --- |\n| Age\t| Age in years | --- | Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5 |\n| sibsp\t| # of siblings / spouses aboard the Titanic | --- | Sibling = brother, sister, stepbrother, stepsister; Spouse = husband, wife (mistresses and fiancés were ignored) |\n| parch\t| # of parents / children aboard the Titanic | --- | Parent = mother/father, Spouse = husband, wife (mistresses and fiances ignored). Some children travelled only with a nanny, therefore parch=0 for them. |\n| ticket | Ticket number | --- | --- |\n| fare\t| Passenger fare | --- | --- |\n| cabin\t| Cabin number | --- | --- |\n| embarked | Port of Embarkation | C = Cherbourg, Q = Queenstown, S = Southampton | --- ||mpton | --- |","metadata":{}},{"cell_type":"markdown","source":"# Exploratory Data Analysis\n\nThe first step in working with this dataset is to load `test.csv` into a dataframe to check its structure, data types, and identify any missing values. The `Hmisc` package provides a robust `describe()` function that provides detailed summary statistics for each variable in a dataset and helps identify missing values.","metadata":{}},{"cell_type":"code","source":"# Load packages\nlibrary(caret)        # machine learning\nlibrary(dplyr)        # data manipulation\nlibrary(ggplot2)      # viz\nlibrary(Hmisc)        # robust describe() function\nlibrary(naniar)       # working with missing data\nlibrary(randomForest) # inference model\n\n# Load train and test data\ntrain <- read.csv(\"/kaggle/input/titanic/train.csv\", stringsAsFactors = FALSE)\ntest <- read.csv(\"/kaggle/input/titanic/test.csv\", stringsAsFactors = FALSE)\nhead(train) #--loaded successfully\nhead(test)  #--loaded successfully\n\n# Evaluate structure and data types\n# str(train)\n# str(test)\n# \n# describe(train)\n# train has missing values: Age 177, Cabin 687, Embarked 2\n# describe(test)\n# test has missing values: Cabin 327, Fare 1, Age 86","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:09:43.471257Z","iopub.execute_input":"2025-01-21T01:09:43.473117Z","iopub.status.idle":"2025-01-21T01:09:43.573971Z","shell.execute_reply":"2025-01-21T01:09:43.571867Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Data Cleaning and Preprocessing\n\n## 1) Encode Categorical Variables\nWe need to encode the categorical variables correctly before using these variables to impute missing `Age` values with a random forest model.\n* `Sex`: Binary *factor* (male = 0, female = 1).\n* `Pclass`: Ordinal encode (1 = 1st class, 2 = 2nd class, 3 = 3rd class).\n* `Embarked`: One-hot encode (C, Q, S).\n\n## 2) Data Transformation\n* `Fare`: Highly skewed (95th percentile = 112.08, max = 512.33). Apply a log transformation (log(Fare + 1)) to reduce skew.\n\n## 3) Missing Values\nPreparing the data for modeling requires addressing missing values in the dataset. \n* `Age`: 177 missing values. We will apply a random forest model to impute missing ages, instead of simpler imputation methods like median or mode. Perform cross-validation to estimate how well the model predicts Age for rows with non-missing values.\n* `Cabin`: 687 missing values. There are too many missing values to impute them. This column will be converted to a new binary column called `HasCabin` of 1 if a cabin was recorded and 0 if not.\n* `Embarked`: 2 missing values. These will be imputed with the mode, since only two are missing.\n\n## 4) Feature Engineering\n* `HasCabin`: 0 if `Cabin` entry missing, 1 if complete.\n* `SibSp` and `Parch`: Combine into a new `FamilySize = SibSp + Parch + 1`. Family size may capture survival trends better than the individual components.\n\n## 5) Remove Unnecessary Features\n* `Cabin`: after extracting `HasCabin` feature.\n* `Name`: We could consider extracting titles (`Mr.`, `Mrs.`, `Miss`, etc.) as a new feature. Titles may capture social status or age-related trends. For this iteration, we will drop the `Name` variable entirely without adding new features.\n* `PassengerId`: purely an identifier\n* `Ticket`: although there could potentially be useful patterns in the ticket prefixes, we will drop this column for this iteration since the data seem noisy.\n","metadata":{}},{"cell_type":"markdown","source":"### Encode `Sex` as numeric factor","metadata":{}},{"cell_type":"code","source":"# DATA CLEANING AND PREPROCESSING\n# 1) Encode categorical variables\n# [X] Encode Sex as numeric factor\ntrain$Sex <- as.factor(ifelse(train$Sex == \"male\", 1, 0)) # v2.2 added as.factor() to coerce output\ntest$Sex <- as.factor(ifelse(test$Sex == \"male\", 1, 0))\nhead(train[, \"Sex\"]) #--encoded successfully\nhead(test[, \"Sex\"]) #--encoded successfully","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:09:43.577565Z","iopub.execute_input":"2025-01-21T01:09:43.579931Z","iopub.status.idle":"2025-01-21T01:09:43.613175Z","shell.execute_reply":"2025-01-21T01:09:43.611137Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Convert `Pclass` to an ordinal factor","metadata":{}},{"cell_type":"code","source":"# [X] Convert Pclass to an ordinal factor\ntrain$Pclass <- factor(train$Pclass, levels = c(1, 2, 3), ordered = TRUE)\ntest$Pclass <- factor(test$Pclass, levels = c(1, 2, 3), ordered = TRUE)\nhead(train[, \"Pclass\"]) #--encoded successfully\nhead(test[, \"Pclass\"]) #--encoded successfully","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:09:43.6163Z","iopub.execute_input":"2025-01-21T01:09:43.61797Z","iopub.status.idle":"2025-01-21T01:09:43.649519Z","shell.execute_reply":"2025-01-21T01:09:43.647634Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### One-hot encode `Embarked`","metadata":{}},{"cell_type":"code","source":"# [X] One-hot encode Embarked\nembarked_train_one_hot <- model.matrix(~ Embarked - 1, data = train)\nembarked_test_one_hot <- model.matrix(~ Embarked - 1, data = test)\n\n# Add the one-hot encoded columns back to the dataset\ntrain <- cbind(train, embarked_train_one_hot)\ntest <- cbind(test, embarked_test_one_hot)\n\n# Verify encoding:\n#head(train[, c(\"Embarked\", \"EmbarkedC\", \"EmbarkedQ\", \"EmbarkedS\")])\n#head(test[, c(\"Embarked\", \"EmbarkedC\", \"EmbarkedQ\", \"EmbarkedS\")])\n\n# -- looks perfect, let's not forget about imputing our 2 missing values\n# Impute 2 missing Embarked values with the mode\ntrain$Embarked[train$Embarked == \"\"] <- NA\nembarked_mode <- names(sort(table(train$Embarked)))\ntrain$Embarked[is.na(train$Embarked)] <- embarked_mode\n\n# verify imputation\n#describe(train$Embarked)\n\n##v2.2 also want to explicitly cast the values in EmbarkedC, EmbarkedQ, and EmbarkedS as factors.\ntrain$EmbarkedC <- as.factor(train$EmbarkedC)\ntest$EmbarkedC <- as.factor(test$EmbarkedC)\ntrain$EmbarkedQ <- as.factor(train$EmbarkedQ)\ntest$EmbarkedQ <- as.factor(test$EmbarkedQ)\ntrain$EmbarkedS <- as.factor(train$EmbarkedS)\ntest$EmbarkedS <- as.factor(test$EmbarkedS)\n\n## SibSp and Parch should be integers\ntrain$SibSp <- as.integer(train$SibSp)\ntest$SibSp <- as.integer(test$SibSp)\ntrain$Parch <- as.integer(train$Parch)\ntest$Parch <- as.integer(test$Parch)\n# Survived needs to be a factor\ntrain$Survived <- as.factor(train$Survived)\n\n# now drop the original Embarked column\ntrain <- train %>% select(-Embarked)\ntest <- test %>% select(-Embarked)\nstr(train)\nstr(test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:09:43.652579Z","iopub.execute_input":"2025-01-21T01:09:43.654238Z","iopub.status.idle":"2025-01-21T01:09:43.747814Z","shell.execute_reply":"2025-01-21T01:09:43.745838Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Log Transform `Fare`","metadata":{}},{"cell_type":"code","source":"# 2) Apply log transformation to Fare\n#--plot shape before transformation?\nggplot(train, aes(x = Fare)) +\n  geom_histogram(bins=20) +\n  theme_minimal() +\n  ggtitle(\"Fare (before transforming)\")\n\n#--note an extreme outlier over 500!\ntrain$Fare <- log(train$Fare + 1)\ntest$Fare <- log(test$Fare + 1)\nhead(train[, \"Fare\"])\nhead(test[, \"Fare\"])\n\nggplot(train, aes(x = Fare)) +\n  geom_histogram(bins=20) +\n  theme_minimal() +\n  ggtitle(\"Log Transformed Fare\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:09:43.750824Z","iopub.execute_input":"2025-01-21T01:09:43.752544Z","iopub.status.idle":"2025-01-21T01:09:44.243521Z","shell.execute_reply":"2025-01-21T01:09:44.241528Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Use a random forest model to impute missing ages\n\nAfter cleaning and transforming the rest of the data, I then trained a random forest model to impute missing Age values, with predictors: Pclass, Sex, SibSp, Parch, Fare, EmbarkedC, EmbarkedQ, and EmbarkedS.","metadata":{}},{"cell_type":"code","source":"# 3) Address missing values\n# Age - Train\n#--Predict missing ages using other features\ntrain_age_data <- train %>% \n    select(Age, Pclass, Sex, SibSp, Parch, Fare, EmbarkedC, EmbarkedQ, EmbarkedS)\n\n# head(train[, c(\"Age\", \"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Fare\", \"EmbarkedC\", \"EmbarkedQ\", \"EmbarkedS\")])\n#--verified that all these columns are formatted properly\n\ntrain_age_complete <- train_age_data %>% filter(!is.na(Age))\ntrain_age_missing <- train_age_data %>% filter(is.na(Age))\n\nset.seed(666)\ncv_control <- trainControl(method = \"cv\", number = 10) #v2.2 10-fold cross-validation for imputing missing ages\ntrain_age_cv_model <- train(\n  Age ~ Pclass + Sex + SibSp + Parch + Fare + EmbarkedC + EmbarkedQ + EmbarkedS,\n  data = train_age_complete,\n  method = \"rf\",\n  trControl = cv_control,\n  tuneLength = 3\n)\nprint(train_age_cv_model)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:09:44.246412Z","iopub.execute_input":"2025-01-21T01:09:44.248001Z","iopub.status.idle":"2025-01-21T01:10:05.292364Z","shell.execute_reply":"2025-01-21T01:10:05.290079Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"The R-squared on the age imputation for v2.2 shows a clear improvement, explaining roughly 31% of the variation versus 27% in v2.0.","metadata":{}},{"cell_type":"code","source":"# Use the best model to predict missing ages\npredicted_train_ages <- predict(train_age_cv_model, newdata = train_age_missing)\n\n# Impute the predicted ages back into the train dataset\ntrain$Age[is.na(train$Age)] <- predicted_train_ages\ndescribe(train$Age)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:10:05.29525Z","iopub.execute_input":"2025-01-21T01:10:05.297072Z","iopub.status.idle":"2025-01-21T01:10:05.355789Z","shell.execute_reply":"2025-01-21T01:10:05.353929Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#--Age in test data\n# Preprocess the test data for Age imputation\ntest_age_data <- test %>% \n  select(Age, Pclass, Sex, SibSp, Parch, Fare, EmbarkedC, EmbarkedQ, EmbarkedS)\n\ntest_age_missing <- test_age_data %>% filter(is.na(Age))\ntest_age_complete <- test_age_data %>% filter(!is.na(Age))\n\n# Use the trained train_age_cv_model to predict missing ages in the test dataset\npredicted_test_ages <- predict(train_age_cv_model, newdata = test_age_missing)\n\n# Impute the predicted ages back into the test dataset\ntest$Age[is.na(test$Age)] <- predicted_test_ages\n\nn_miss(test$Age)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:10:05.358485Z","iopub.execute_input":"2025-01-21T01:10:05.36024Z","iopub.status.idle":"2025-01-21T01:10:05.400579Z","shell.execute_reply":"2025-01-21T01:10:05.398661Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create HasCabin feature\n# any_na(train$Cabin) # returns FALSE\n# describe(train$Cabin) # 687 missing - need to replace empty string values\n\n# Convert empty strings to NA in Cabin\ntrain$Cabin[train$Cabin == \"\"] <- NA\ntest$Cabin[test$Cabin == \"\"] <- NA\n\n# n_miss(train$Cabin)\n# n_miss(test$Cabin)\n\n# Encode the HasCabin variable:\ntrain$HasCabin <- ifelse(!is.na(train$Cabin), 1, 0)\ntest$HasCabin <- ifelse(!is.na(test$Cabin), 1, 0)\n\n# describe(train$HasCabin) # - perfect\nhead(train[, c(\"Cabin\", \"HasCabin\")])  #looks good\nhead(test[, c(\"Cabin\", \"HasCabin\")]) \n\nn_miss(train$HasCabin)\nn_miss(test$HasCabin)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:10:05.4037Z","iopub.execute_input":"2025-01-21T01:10:05.405262Z","iopub.status.idle":"2025-01-21T01:10:05.474845Z","shell.execute_reply":"2025-01-21T01:10:05.472955Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create the FamilySize feature\ntrain$FamilySize <- as.integer(train$SibSp + train$Parch + 1)\ntest$FamilySize <- as.integer(test$SibSp + test$Parch + 1)\n\n# Inspect the new feature\nhead(train[, \"FamilySize\"])\nhead(test[, \"FamilySize\"])\n\n# describe(train)\n# describe(test)\n#--test still has 1 missing fare - impute with the median\ntest$Fare[is.na(test$Fare)] <- median(test$Fare, na.rm = TRUE)\ndescribe(test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:10:05.478329Z","iopub.execute_input":"2025-01-21T01:10:05.480032Z","iopub.status.idle":"2025-01-21T01:10:05.609174Z","shell.execute_reply":"2025-01-21T01:10:05.607183Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"describe(test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:10:05.61228Z","iopub.execute_input":"2025-01-21T01:10:05.613925Z","iopub.status.idle":"2025-01-21T01:10:05.725974Z","shell.execute_reply":"2025-01-21T01:10:05.7239Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Random Forest Model","metadata":{}},{"cell_type":"code","source":"# Data preprocessing is now complete and we are ready to model \n# the `Survival` variable for the `test` dataset!\n\n# Drop Cabin\ntrain <- train %>% select(-Cabin)\ntest <- test %>% select(-Cabin)\n\n# Train the random forest model\nrf_cv_control <- trainControl(method = \"cv\", number = 10)\nset.seed(666)\nrf_model <- train(\n  Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + EmbarkedC + EmbarkedQ + EmbarkedS + HasCabin + FamilySize, \n  data = train,\n  method = \"rf\",\n  trControl = rf_cv_control,\n    \n  tuneLength = 5\n)\n\n# Print the cross-validation results\nprint(rf_model)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:10:05.729623Z","iopub.execute_input":"2025-01-21T01:10:05.731386Z","iopub.status.idle":"2025-01-21T01:10:38.723823Z","shell.execute_reply":"2025-01-21T01:10:38.722015Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Use the trained model to predict Survived in the test dataset\ntest$Survived <- predict(rf_model, newdata = test)\n\ntable(test$Survived)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:10:38.726578Z","iopub.execute_input":"2025-01-21T01:10:38.728005Z","iopub.status.idle":"2025-01-21T01:10:38.774543Z","shell.execute_reply":"2025-01-21T01:10:38.772283Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Save the updated test dataset with predictions\ngender_submission <- test %>% select(PassengerId, Survived)\nhead(gender_submission)\nwrite.csv(gender_submission, \"submission.csv\", row.names = FALSE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-21T01:10:38.778071Z","iopub.execute_input":"2025-01-21T01:10:38.77991Z","iopub.status.idle":"2025-01-21T01:10:38.809925Z","shell.execute_reply":"2025-01-21T01:10:38.808Z"}},"outputs":[],"execution_count":null}]}